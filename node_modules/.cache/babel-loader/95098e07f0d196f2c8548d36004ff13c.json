{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { rest } from \"msw\";\nimport { users } from \"./usersMock\";\nexport const handlers = [rest.post(\"/login\", (req, res, ctx) => {\n  // Persist user's authentication in the session\n\n  sessionStorage.setItem(\"is-authenticated\", \"true\");\n  return res(\n  // Respond with a 200 status code\n\n  ctx.status(200));\n}), rest.get(\"/user\", (req, res, ctx) => {\n  // Check if the user is authenticated in this session\n\n  const isAuthenticated = sessionStorage.getItem(\"is-authenticated\");\n  if (!isAuthenticated) {\n    // If not authenticated, respond with a 403 error\n\n    return res(ctx.status(403), ctx.json({\n      errorMessage: \"Not authorized\"\n    }));\n  }\n\n  // If authenticated, return a mocked user details\n\n  return res(ctx.status(200), ctx.json({\n    username: \"admin\"\n  }));\n}), rest.get(\"https://jsonplaceholder.typicode.com/users\", (req, res, ctx) => res(ctx.json(users)))];","map":{"version":3,"names":["rest","users","handlers","post","req","res","ctx","sessionStorage","setItem","status","get","isAuthenticated","getItem","json","errorMessage","username"],"sources":["/Users/prueba/Documents/repos/front-software2023/src/mocks/handlers.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { rest } from \"msw\";\nimport { users } from \"./usersMock\";\n\nexport const handlers = [\n  rest.post(\"/login\", (req, res, ctx) => {\n    // Persist user's authentication in the session\n\n    sessionStorage.setItem(\"is-authenticated\", \"true\");\n\n    return res(\n      // Respond with a 200 status code\n\n      ctx.status(200)\n    );\n  }),\n\n  rest.get(\"/user\", (req, res, ctx) => {\n    // Check if the user is authenticated in this session\n\n    const isAuthenticated = sessionStorage.getItem(\"is-authenticated\");\n\n    if (!isAuthenticated) {\n      // If not authenticated, respond with a 403 error\n\n      return res(\n        ctx.status(403),\n\n        ctx.json({\n          errorMessage: \"Not authorized\",\n        })\n      );\n    }\n\n    // If authenticated, return a mocked user details\n\n    return res(\n      ctx.status(200),\n\n      ctx.json({\n        username: \"admin\",\n      })\n    );\n  }),\n\n  rest.get(\"https://jsonplaceholder.typicode.com/users\", (req, res, ctx) =>\n    res(ctx.json(users))\n  ),\n];\n"],"mappings":"AAAA;AACA;AACA,SAASA,IAAI,QAAQ,KAAK;AAC1B,SAASC,KAAK,QAAQ,aAAa;AAEnC,OAAO,MAAMC,QAAQ,GAAG,CACtBF,IAAI,CAACG,IAAI,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACrC;;EAEAC,cAAc,CAACC,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC;EAElD,OAAOH,GAAG;EACR;;EAEAC,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAChB;AACH,CAAC,CAAC,EAEFT,IAAI,CAACU,GAAG,CAAC,OAAO,EAAE,CAACN,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACnC;;EAEA,MAAMK,eAAe,GAAGJ,cAAc,CAACK,OAAO,CAAC,kBAAkB,CAAC;EAElE,IAAI,CAACD,eAAe,EAAE;IACpB;;IAEA,OAAON,GAAG,CACRC,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,EAEfH,GAAG,CAACO,IAAI,CAAC;MACPC,YAAY,EAAE;IAChB,CAAC,CAAC,CACH;EACH;;EAEA;;EAEA,OAAOT,GAAG,CACRC,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,EAEfH,GAAG,CAACO,IAAI,CAAC;IACPE,QAAQ,EAAE;EACZ,CAAC,CAAC,CACH;AACH,CAAC,CAAC,EAEFf,IAAI,CAACU,GAAG,CAAC,4CAA4C,EAAE,CAACN,GAAG,EAAEC,GAAG,EAAEC,GAAG,KACnED,GAAG,CAACC,GAAG,CAACO,IAAI,CAACZ,KAAK,CAAC,CAAC,CACrB,CACF"},"metadata":{},"sourceType":"module"}