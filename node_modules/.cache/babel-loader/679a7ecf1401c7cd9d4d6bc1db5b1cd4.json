{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n  const astDefinitions = context.getDocument().definitions;\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(name => name.value);\n    }\n  }\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n      if (!locations) {\n        context.reportError(new GraphQLError(`Unknown directive \"@${name}\".`, node));\n        return;\n      }\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(new GraphQLError(`Directive \"@${name}\" may not be used on ${candidateLocation}.`, node));\n      }\n    }\n  };\n}\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        const parentNode = ancestors[ancestors.length - 3];\n        'kind' in parentNode || invariant(false);\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}","map":{"version":3,"names":["inspect","invariant","GraphQLError","OperationTypeNode","DirectiveLocation","Kind","specifiedDirectives","KnownDirectivesRule","context","locationsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","locations","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","map","Directive","node","_key","_parent","_path","ancestors","reportError","candidateLocation","getDirectiveLocationForASTPath","includes","appliedTo","length","OPERATION_DEFINITION","getDirectiveLocationForOperation","operation","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE_DEFINITION","SCHEMA_DEFINITION","SCHEMA_EXTENSION","SCHEMA","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","SCALAR","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","OBJECT","FIELD_DEFINITION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","INTERFACE","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","UNION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","ENUM","ENUM_VALUE_DEFINITION","ENUM_VALUE","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","INPUT_OBJECT","INPUT_VALUE_DEFINITION","parentNode","INPUT_FIELD_DEFINITION","ARGUMENT_DEFINITION","QUERY","MUTATION","SUBSCRIPTION"],"sources":["/Users/prueba/Documents/repos/front-software2023/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, node),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}